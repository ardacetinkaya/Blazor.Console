<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
    <LangVersion>8.0</LangVersion>
    <OutputType>Library</OutputType>
    <IsPackable>true</IsPackable>
    <BlazorLinkOnBuild>false</BlazorLinkOnBuild>
    <PackageId>Blzr.Components.CommandLine</PackageId>
    <Description>
    A simple component to mock command line interface(CLI) for ASP.NET Core 3.x Blazor applications to execute some custom commands for an application. 
    Within ICommand interface it is possible to implement any custom business related commands for Blazor.Console
    
   Example scenarios;
    - Clear response cache
    - Export log files
    - Change run-time settings
    - Monitor application resources
   
   Updates:
    - .NET 5.0 upgrade
    
    </Description>
    <Version>5.0.0</Version>
    <Authors>Arda Cetinkaya</Authors>
    <PackageTags>commandline;blazor;asp.net core;.net core</PackageTags>
    <RepositoryUrl>https://github.com/ardacetinkaya/Blazor.Console</RepositoryUrl>
  </PropertyGroup>
  <ItemGroup>
    <!-- .js/.css files will be referenced via <script>/<link> tags; other content files will just be included in the app's 'dist' directory without any tags referencing them -->
    <EmbeddedResource Include="content\**\*.js" LogicalName="blazor:js:%(RecursiveDir)%(Filename)%(Extension)" />
    <EmbeddedResource Include="content\**\*.css" LogicalName="blazor:css:%(RecursiveDir)%(Filename)%(Extension)" />
    <EmbeddedResource Include="content\**" Exclude="**\*.js;**\*.css" LogicalName="blazor:file:%(RecursiveDir)%(Filename)%(Extension)" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="System.CommandLine" Version="2.0.0-beta1.20371.2" />
  </ItemGroup>
</Project>
